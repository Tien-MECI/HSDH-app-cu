<!DOCTYPE html>
<html>
<head>
  <title>Dashboard Kinh Doanh</title>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2.2.0"></script>
  <style>
    body { font-family: Arial, sans-serif; }
    .filter-box { text-align:center; margin-bottom: 20px; }
    .row { display:flex; flex-wrap:wrap; justify-content:center; gap:20px; }
    .chart-container { flex:1; min-width:340px; max-width:700px; height:420px; position:relative; }
    .full-width { max-width:1000px; }
    canvas { width:100% !important; height:100% !important; }
  </style>
</head>
<body>
  <h1 style="text-align:center;">üìä Dashboard Kinh Doanh</h1>

  <div class="filter-box">
    <form method="GET" action="/dashboard" style="display:inline-flex; gap:8px; align-items:center;">
      <label>T·ª´ th√°ng:</label>
      <select name="startMonth">
        <option value="">T·∫•t c·∫£</option>
        <% for (let m=1; m<=12; m++) { %>
          <option value="<%= m %>" <%= startMonth==m ? 'selected' : '' %>>Th√°ng <%= m %></option>
        <% } %>
      </select>
      <label>ƒê·∫øn th√°ng:</label>
      <select name="endMonth">
        <option value="">T·∫•t c·∫£</option>
        <% for (let m=1; m<=12; m++) { %>
          <option value="<%= m %>" <%= endMonth==m ? 'selected' : '' %>>Th√°ng <%= m %></option>
        <% } %>
      </select>
      <button type="submit">L·ªçc</button>
    </form>
  </div>

  <!-- H√†ng 1 -->
  <div class="row">
    <div class="chart-container">
      <canvas id="salesChart"></canvas>
    </div>
    <div class="chart-container">
      <canvas id="statusChart"></canvas>
    </div>
  </div>

  <!-- H√†ng 2: Top s·∫£n ph·∫©m -->
  <div class="row">
    <div class="chart-container full-width">
      <canvas id="productChart"></canvas>
    </div>
  </div>
  <!-- H√†ng 3: B√°o c√°o chƒÉm s√≥c kh√°ch h√†ng -->
  <div class="row">
    <div class="chart-container full-width">
      <canvas id="cskhChart"></canvas>
    </div>
  </div>


  <script>
    const sales = <%- JSON.stringify(sales) %>;
    const soDonChot = <%= soDonChot %>;
    const soDonHuy = <%= soDonHuy %>;
    const topProducts = <%- JSON.stringify(topProducts) %>;
    const watermarkBase64 = "<%= watermarkBase64 %>";

    // watermark plugin (g√≥c d∆∞·ªõi ph·∫£i)
    const watermarkPlugin = {
      id: 'watermark',
      beforeDraw: (chart) => {
        if (!watermarkBase64) return;
        const ctx = chart.ctx;
        const img = new Image();
        img.src = watermarkBase64;
        const w = chart.width, h = chart.height;
        img.onload = () => {
          const size = Math.min(w, h) * 0.12;
          ctx.save();
          ctx.globalAlpha = 0.12;
          ctx.drawImage(img, w - size - 8, h - size - 8, size, size);
          ctx.restore();
        };
      }
    };

    // --- Sales by NV chart ---
    new Chart(document.getElementById("salesChart"), {
      type: "bar",
      data: {
        labels: sales.map(s => s.nhanVien),
        datasets: [{
          label: "T·ªïng doanh s·ªë",
          data: sales.map(s => Math.round(s.tongDoanhSo)),
          backgroundColor: "rgba(54,162,235,0.75)",
          maxBarThickness: 60
        }]
      },
      options: {
        responsive: true, maintainAspectRatio:false,
        plugins: {
          title: { display:true, text: "üíº Doanh s·ªë theo nh√¢n vi√™n", font:{size:16} },
          datalabels: {
            color:"#000", anchor:"end", align:"top",
            formatter: v => v.toLocaleString("vi-VN"),
            font: ctx => ({ size: Math.max(10, Math.min(14, ctx.chart.width / Math.max(1, sales.length) * 0.6)) })
          }
        },
        scales: {
          x: { ticks: { autoSkip: true, maxRotation:45, minRotation:0 } },
          y: { ticks: { callback: v => v.toLocaleString("vi-VN") } }
        }
      },
      plugins: [ChartDataLabels, watermarkPlugin]
    });

    // --- Status pie chart ---
    new Chart(document.getElementById("statusChart"), {
      type: "pie",
      data: {
        labels:["ƒê∆°n ch·ªët","ƒê∆°n h·ªßy"],
        datasets:[{ data:[soDonChot, soDonHuy], backgroundColor:["#4CAF50","#F44336"] }]
      },
      options: {
        responsive:true, maintainAspectRatio:false,
        plugins:{
          title: { display:true, text: "üìä T·ª∑ l·ªá ƒë∆°n ch·ªët / h·ªßy", font:{size:16} },
          datalabels: {
            color:"#fff",
            formatter: (v, ctx) => {
              const total = ctx.chart.data.datasets[0].data.reduce((a,b)=>a+b,0);
              return total>0 ? ((v/total)*100).toFixed(1)+"%" : "0%";
            },
            font: ctx => ({ size: Math.max(10, Math.min(14, ctx.chart.width / 10)) })
          }
        }
      },
      plugins: [ChartDataLabels, watermarkPlugin]
    });

    // --- Top product chart: bar (soLuong) + line (doanhSo) ---
    new Chart(document.getElementById("productChart"), {
      type: "bar",
      data: {
        labels: topProducts.map(p => p.maSP),
        datasets: [
          {
            label: "S·ªë l∆∞·ª£ng",
            data: topProducts.map(p => Math.round(p.soLuong)),
            backgroundColor: "rgba(255,159,64,0.8)",
            yAxisID: "y",
            maxBarThickness: 60
          },
          {
            label: "Doanh s·ªë",
            data: topProducts.map(p => Math.round(p.doanhSo)),
            borderColor: "rgba(54,162,235,0.9)",
            backgroundColor: "rgba(54,162,235,0.2)",
            type: "line",
            yAxisID: "y1",
            tension: 0.25,
            pointRadius: 4
          }
        ]
      },
      options: {
        responsive:true, maintainAspectRatio:false,
        plugins: {
          title: { display:true, text: "üèÜ Top 10 s·∫£n ph·∫©m b√°n ch·∫°y nh·∫•t (theo Doanh s·ªë)", font:{size:16} },
          datalabels: {
            display: (ctx) => ctx.dataset.type !== 'line',
            color: "#000",
            anchor: "end",
            align: "top",
            formatter: (v, ctx) => {
              const unit = topProducts[ctx.dataIndex]?.donVi || "";
              return v.toLocaleString("vi-VN") + (unit ? " " + unit : "");
            },
            font: ctx => ({ size: Math.max(10, Math.min(14, ctx.chart.width / Math.max(1, topProducts.length) * 0.6)) })
          },
          tooltip: {
            callbacks: {
              label: (ctx) => {
                if (ctx.dataset.label === "Doanh s·ªë") {
                  return ctx.dataset.label + ": " + ctx.parsed.y.toLocaleString("vi-VN") + " ƒë";
                } else {
                  const unit = topProducts[ctx.dataIndex]?.donVi || "";
                  return ctx.dataset.label + ": " + ctx.parsed.y.toLocaleString("vi-VN") + (unit ? " " + unit : "");
                }
              }
            }
          }
        },
        scales: {
          x: {
            ticks: { autoSkip: false, maxRotation: 45, minRotation: 0 },
          },
          y: {
            position: "left",
            title: { display:true, text: "S·ªë l∆∞·ª£ng" },
            beginAtZero: true
          },
          y1: {
            position: "right",
            title: { display:true, text: "Doanh s·ªë (VND)" },
            beginAtZero: true,
            grid: { drawOnChartArea: false },
            ticks: { callback: v => v.toLocaleString("vi-VN") }
          }
        }
      },
      plugins: [ChartDataLabels, watermarkPlugin]
    });


    // D·ªØ li·ªáu CSKH
  const cskhData = <%- JSON.stringify(cskhData) %>;
  const hinhThucList = <%- JSON.stringify(hinhThucList) %>;

  // T·∫°o datasets cho t·ª´ng h√¨nh th·ª©c
  const cskhDatasets = hinhThucList.map((ht, idx) => ({
    label: ht,
    data: cskhData.map(item => item[ht] || 0),
    backgroundColor: `hsl(${(idx * 60) % 360}, 70%, 60%)`, // t·ª± sinh m√†u kh√°c nhau
    stack: "Stack 0"
  }));

  new Chart(document.getElementById("cskhChart"), {
    type: "bar",
    data: {
      labels: cskhData.map(item => item.nhanVien),
      datasets: cskhDatasets
    },
    options: {
      responsive: true,
      maintainAspectRatio: false,
      plugins: {
        title: { display: true, text: "üìû B√°o c√°o chƒÉm s√≥c kh√°ch h√†ng", font: { size: 16 } },
        tooltip: {
          callbacks: {
            footer: (items) => {
              const nv = items[0].label;
              const total = cskhData.find(x => x.nhanVien === nv)?.total || 0;
              return `T·ªïng li√™n h·ªá: ${total}`;
            }
          }
        },
        datalabels: {
          color: "#000",
          anchor: "end",
          align: "top",
          formatter: v => v > 0 ? v : "",
          font: ctx => ({ size: Math.max(10, Math.min(14, ctx.chart.width / Math.max(1, cskhData.length) * 0.6)) })
        }
      },
      scales: {
        x: { stacked: true, ticks: { autoSkip: false, maxRotation: 45 } },
        y: { stacked: true, beginAtZero: true }
      }
    },
    plugins: [ChartDataLabels, watermarkPlugin]
  });
  </script>
</body>
</html>
